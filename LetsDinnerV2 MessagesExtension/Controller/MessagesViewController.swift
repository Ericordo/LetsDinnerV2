//
//  MessagesViewController.swift
//  LetsDinnerV2 MessagesExtension
//
//  Created by Eric Ordonneau on 02/11/2019.
//  Copyright Â© 2019 Eric Ordonneau. All rights reserved.
//

import UIKit
import Messages
import Firebase
import FirebaseAuth
import FirebaseAnalytics
import RealmSwift
import SwiftyStoreKit

class MessagesViewController: MSMessagesAppViewController {
        
    private var newNameRequested = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
                
//        print(Realm.Configuration.defaultConfiguration.fileURL ?? "")
        self.view.backgroundColor = .backgroundColor
        
        #warning("Get rid of that and just reinstall the app")
        let config = Realm.Configuration(
            schemaVersion: 2,
            migrationBlock: { migration, oldSchemaVersion in
                if (oldSchemaVersion < 2) {
                }
        })
        Realm.Configuration.defaultConfiguration = config
        do {
            _ = try Realm()
        } catch {
            print(error.localizedDescription)
        }

        CloudManager.shared.retrieveProfileInfo()
    }

    override func viewWillLayoutSubviews() {
        let gradientLayers = view.layer.sublayers?.compactMap { $0 as? CAGradientLayer }
        gradientLayers?.first?.frame = view.bounds
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        
        if FirebaseApp.app() == nil {
            FirebaseApp.configure()
        }
        
        Auth.auth().signInAnonymously { (authResult, error) in
            if let error = error {
                print(error.localizedDescription)
            }
        }
        
        IAPHelper.shared.startObserving()
        
        if presentationStyle == .transcript {
            presentTranscriptView(for: conversation)
        } else {
            presentViewController(for: conversation, with: presentationStyle)
        }
        
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didBecomeActive(with conversation: MSConversation) {        
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        
        let currentUserUid = conversation.localParticipantIdentifier.uuidString
        
        let cloudId = CloudManager.shared.retrieveUserIdOnCloud()
        
        if cloudId == nil {
            CloudManager.shared.saveUserInfoOnCloud(currentUserUid, key: Keys.userUid)
        }
        
        var identifier = String()
        if let cloudID = CloudManager.shared.retrieveUserIdOnCloud(), !cloudID.isEmpty {
            identifier = cloudID
        } else {
            identifier = currentUserUid
        }
        
        Event.shared.currentUser = User(identifier: identifier,
                                        fullName: defaults.username,
                                        hasAccepted: .pending)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        defaults.backupEventData()
        NotificationCenter.default.post(name: NSNotification.Name(rawValue: "DidResignActive"),
                                        object: nil)
        IAPHelper.shared.stopObserving()
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {

    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        if Event.shared.eventCreation {
            Event.shared.deleteEvent()
        }
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.willTransition(to: presentationStyle)
        NotificationCenter.default.post(name: NSNotification.Name(rawValue: "WillTransition"),
                                        object: nil)
        removeViewController()
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.didTransition(to: presentationStyle)
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    // MARK: - Present View Controller
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        // Remove any child view controllers that have been presented.
        removeViewController()
        
        let controller: UIViewController
        
        if presentationStyle == .compact {
            if Event.shared.dinnerName.isEmpty {
                controller = instantiateInitialViewController()
            } else {
                controller = instantiateIdleViewController()
            }
            
        } else {
            // Expanded Style
            if defaults.username.isEmpty || newNameRequested {
                newNameRequested = false
                controller = instantiateRegistrationViewController(previousStep: StepStatus.currentStep ?? StepTracking.eventSummaryVC)
            } else {
                if conversation.selectedMessage?.url != nil {
                    guard let message = conversation.selectedMessage else { return }
                    Event.shared.currentSession = message.session
                    Event.shared.parseMessage(message: message)
                    controller = instantiateEventSummaryViewController()
                } else {
                    switch StepStatus.currentStep {
                    case .initialVC:
                        controller = instantiatePremiumCheckViewController()
                    case .registrationVC:
                        controller = instantiateRegistrationViewController(previousStep: StepStatus.currentStep!)
                    case .newEventVC:
                        controller = instantiateNewEventViewController()
                    case .recipesVC:
                        controller = instantiateRecipesViewController()
                    case .selectedRecipesVC:
                        controller = instantiateRecipesViewController()
                    case .managementVC:
                        controller = instantiateManagementViewController()
                    case .eventDescriptionVC:
                        controller = instantiateEventDescriptionViewController()
                    case .reviewVC:
                        controller = instantiateReviewViewController()
                    case .eventSummaryVC:
                        controller = instantiateEventSummaryViewController()
                    case .tasksListVC:
                        controller = instantiateTasksListViewController()
                    case .eventInfoVC:
                        controller = instantiateEventInfoViewController()
                    case .none:
                        controller = instantiatePremiumCheckViewController()
                    case .expiredEventVC:
                        controller = instantiateExpiredEventViewController()
                    case .premiumVC:
                        controller = instantiatePremiumCheckViewController()
                    case .thankYouVC:
                        controller = instantiateThankYouViewController()
                    }
                }
            }
        }
        self.addChildViewController(controller: controller)
    }
    
    // MARK: Transcript View
    
    private func presentTranscriptView(for conversation: MSConversation) {
        let bubbleManager = BubbleManager()
        guard conversation.selectedMessage?.url != nil else { return }
        guard let message = conversation.selectedMessage else { return }
        let messageIsFromMe = message.senderParticipantIdentifier == conversation.localParticipantIdentifier
        let bubbleInfo = bubbleManager.fetchBubbleInformation(for: message)
        let transcriptView = EventTranscriptView(bubbleInfo: bubbleInfo,
                                                 delegate: self,
                                                 messageIsFromMe: messageIsFromMe)
        view.addSubview(transcriptView)
        transcriptView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            transcriptView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
            transcriptView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            transcriptView.topAnchor.constraint(equalTo: view.topAnchor),
            transcriptView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    override func contentSizeThatFits(_ size: CGSize) -> CGSize {
        return CGSize(width: 300, height: 151)
    }
    
    // MARK: Controller Animation
   private func addChildViewController(controller: UIViewController, transition: VCTransitionDirection = .noTransition) {
        
        addChild(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        
        // Transition animation
        if transition != .noTransition {
            controller.view.layer.add(configureTransitionAnimation(transition: transition),
                                      forKey: nil)
        }
        
//        self.view.insertSubview(controller.view, at: 1)
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        controller.didMove(toParent: self)
    }
    
    private func configureTransitionAnimation(transition: VCTransitionDirection) -> CATransition {
        let transitionAnimation = CATransition()
        transitionAnimation.duration = 0.3
        transitionAnimation.type = CATransitionType.push
        
        switch transition {
        case .VCGoBack:
            transitionAnimation.subtype = CATransitionSubtype.fromLeft
        case .VCGoForward:
            transitionAnimation.subtype = CATransitionSubtype.fromRight
        case .VCGoUp:
            transitionAnimation.subtype = CATransitionSubtype.fromTop
        case .VCGoDown:
            transitionAnimation.subtype = CATransitionSubtype.fromBottom
        default:
            break
        }
        return transitionAnimation
    }
        
    private func removeViewController(transition: VCTransitionDirection = .noTransition) {
        var delay = 0.0
        
        for child in children {
            if transition != .noTransition {
                delay = 0.3
                child.configureDismissVCTransitionAnimation(transition: transition)
            }
            
            UIView.transition(with: self.view,
                              duration: 0.2,
                              options: .transitionCrossDissolve,
                              animations: nil,
                              completion: nil)
            
            child.willMove(toParent: nil)

            DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                child.view.removeFromSuperview()
                child.removeFromParent()
            }
        }
    }
        
    // MARK: Init the VC
    
    private func instantiateProgressViewController() -> UIViewController {
        return ProgressViewController()
    }
    
    private func instantiateInitialViewController() -> UIViewController {
        return InitialViewController(delegate: self)
    }
    
    private func instantiateIdleViewController() -> UIViewController {
        return IdleViewController(delegate: self)
    }
    
    private func instantiateRegistrationViewController(previousStep: StepTracking) -> UIViewController {
        return RegistrationViewController(viewModel: RegistrationViewModel(),
                                          previousStep: previousStep,
                                          delegate: self)
    }
    
    private func instantiateNewEventViewController() -> UIViewController {
        Analytics.logEvent("new_event", parameters: nil)
        return NewEventViewController(viewModel: NewEventViewModel(), delegate: self)
    }
    
    private func instantiateRecipesViewController() -> UIViewController {
        return RecipesViewController(viewModel: RecipesViewModel(), delegate: self)
    }
    
    private func instantiateManagementViewController() -> UIViewController {
        return ManagementViewController(viewModel: ManagementViewModel(), delegate: self)
    }
    
    private func instantiateEventDescriptionViewController() -> UIViewController {
        return EventDescriptionViewController(viewModel: EventDescriptionViewModel(), delegate: self)
    }
    
    private func instantiateReviewViewController() -> UIViewController {
        return ReviewViewController(viewModel: ReviewViewModel(), delegate: self)
    }
    
    private func instantiateEventSummaryViewController() -> UIViewController {
        return EventSummaryViewController(viewModel: EventSummaryViewModel(), delegate: self)
    }
    
    private func instantiateExpiredEventViewController() -> UIViewController {
        return ExpiredEventViewController(delegate: self, viewModel: PremiumCheckViewModel())
    }
    
    private func instantiateTasksListViewController() -> UIViewController {
        return TasksListViewController(viewModel: TasksListViewModel(), delegate: self)
    }
    
    private func instantiateEventInfoViewController() -> UIViewController {
        return EventInfoViewController(delegate: self)
    }
    
    private func instantiatePremiumViewController(with newSubscription: NewSubscription) -> UIViewController {
        return PremiumViewController(delegate: self,
                                     viewModel: PremiumViewModel(with: newSubscription))
    }
    
    private func instantiatePremiumCheckViewController() -> UIViewController {
        return PremiumCheckViewController(viewModel: PremiumCheckViewModel(),
                                          delegate: self)
    }
    
    private func instantiateThankYouViewController() -> UIViewController {
        return ThankYouViewController(delegate: self)
    }
    
    private func sendMessage(message: MSMessage) {
        guard let conversation = activeConversation else { fatalError("Expected an active conversation") }
        conversation.insert(message) {error in
            if let error = error {
                print(error)
            }
        }
        self.dismiss()
    }
    
    private func sendMessageDirectly(message: MSMessage) {
        guard let conversation = activeConversation else { fatalError("Expected an active conversation") }
        conversation.send(message) {error in
            if let error = error {
                print(error)
            }
        }
        self.dismiss()
    }
    
    private func resetEvent() {
        activeConversation?.selectedMessage?.url = nil
        Event.shared.resetEvent()
        CustomOrderHelper.shared.customOrder.removeAll()
    }
}

// MARK: Delegations

extension MessagesViewController: InitialViewControllerDelegate {
    func initialVCDidTapNewEvent() {
        StepStatus.currentStep = .premiumVC
        self.resetEvent()
        requestPresentationStyle(.expanded)
    }
    
    func initialVCDidTapSettings() {
        newNameRequested = true
        requestPresentationStyle(.expanded)
    }
}

extension MessagesViewController: IdleViewControllerDelegate {
    func idleVCDidTapContinue() {
        requestPresentationStyle(.expanded)
    }
    
    func idleVCDidTapNewEvent() {
        StepStatus.currentStep = .premiumVC
        self.resetEvent()
        requestPresentationStyle(.expanded)
    }
    
    func idleVCDidTapSettings() {
        newNameRequested = true
        requestPresentationStyle(.expanded)
    }
}

extension MessagesViewController: RegistrationViewControllerDelegate {
    func didTapNext(previousStep: StepTracking, newSubscription: NewSubscription?) {
        if let subscription = newSubscription {
            let controller = instantiatePremiumViewController(with: subscription)
            removeViewController(transition: .VCGoForward)
            addChildViewController(controller: controller, transition: .VCGoForward)
        } else {
            if previousStep == .eventSummaryVC {
                StepStatus.currentStep = .eventSummaryVC
                guard let conversation = activeConversation else { fatalError("Expected an active conversation") }
                presentViewController(for: conversation, with: .expanded)
            } else {
                let controller = instantiateNewEventViewController()
                removeViewController(transition: .VCGoForward)
                addChildViewController(controller: controller, transition: .VCGoForward)
            }
        }
    }

    func didTapCancel() {
        newNameRequested = false
        requestPresentationStyle(.compact)
    }
}

extension MessagesViewController: NewEventViewControllerDelegate {

    func eventDescriptionVCDidTapFinish(controller: NewEventViewController) {
        let controller = instantiateReviewViewController()
        removeViewController()
        addChildViewController(controller: controller)
    }

    func newEventVCDdidTapProfile(controller: NewEventViewController) {
        let controller = instantiateRegistrationViewController(previousStep: .newEventVC)
        removeViewController()
        addChildViewController(controller: controller)
    }

    func newEventVCDidTapNext(controller: NewEventViewController) {
        let controller = instantiateRecipesViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
}

extension MessagesViewController: RecipesViewControllerDelegate {
    func recipeVCDidTapNext() {
        let controller = instantiateManagementViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
    
    func recipeVCDidTapPrevious() {
        let controller = instantiateNewEventViewController()
        removeViewController(transition: .VCGoBack)
        addChildViewController(controller: controller, transition: .VCGoBack)
    }
}

extension MessagesViewController: ManagementViewControllerDelegate {
    func managementVCDidTapBack() {
        let controller = instantiateRecipesViewController()
        removeViewController(transition: .VCGoBack)
        addChildViewController(controller: controller, transition: .VCGoBack)
    }
    
    func managementVCDdidTapNext() {
        let controller = instantiateEventDescriptionViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
}

extension MessagesViewController: EventDescriptionViewControllerDelegate {
    func eventDescriptionVCDidTapPrevious(controller: EventDescriptionViewController) {
        let controller = instantiateManagementViewController()
        removeViewController(transition: .VCGoBack)
        addChildViewController(controller: controller, transition: .VCGoBack)
    }
    
    func eventDescriptionVCDidTapFinish(controller: EventDescriptionViewController) {
        let controller = instantiateReviewViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
}

extension MessagesViewController: ReviewViewControllerDelegate {
    func reviewVCDidTapPrevious() {
        let controller = instantiateEventDescriptionViewController()
        removeViewController(transition: .VCGoBack)
        addChildViewController(controller: controller, transition: .VCGoBack)
    }
    
    func reviewVCDidTapSend() {
        let currentSession = activeConversation?.selectedMessage?.session ?? MSSession()
        Event.shared.summary = String.localizedStringWithFormat(LabelStrings.inviteSummary,
                                                                defaults.username)
        Event.shared.eventCreation = true
        let message = Event.shared.prepareMessage(session: currentSession,
                                                  eventCreation: Event.shared.eventCreation,
                                                  action: .createEvent)
        CloudManager.shared.saveUserInfoOnCloud(Invitation.accepted.rawValue,
                                                key: Event.shared.localEventId)
        sendMessage(message: message)
    }
    
    func reviewVCBackToManagementVC() {
        let controller = instantiateManagementViewController()
        removeViewController(transition: .VCGoBack)
        addChildViewController(controller: controller, transition: .VCGoBack)
    }
}

extension MessagesViewController: EventSummaryViewControllerDelegate {
    func eventSummaryVCDidCancelEvent() {
        Event.shared.cancelFirebaseEvent()
        Event.shared.summary = String.localizedStringWithFormat(LabelStrings.cancelSummary,
                                                                defaults.username)
        let currentSession = activeConversation?.selectedMessage?.session ?? MSSession()
        let message = Event.shared.prepareMessage(session: currentSession,
                                                  eventCreation: Event.shared.eventCreation,
                                                  action: .cancelEvent)
        sendMessageDirectly(message: message)
    }
    
    func eventSummaryVCDidUpdateDate() {
        Event.shared.summary = String.localizedStringWithFormat(LabelStrings.dateChangeSummary,
                                                                defaults.username)
        Event.shared.eventCreation = false
        let currentSession = activeConversation?.selectedMessage?.session ?? MSSession()
        let message = Event.shared.prepareMessage(session: currentSession,
                                                  eventCreation: Event.shared.eventCreation,
                                                  action: .rescheduleEvent)
        sendMessageDirectly(message: message)
    }
    
    
    func eventSummaryVCOpenTasksList() {
        let controller = instantiateTasksListViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
    
    func eventSummaryVCDidAnswer(hasAccepted: Invitation) {
        // Instant MessageUI update
        if hasAccepted == .accepted {
            Event.shared.summary = String.localizedStringWithFormat(AlertStrings.acceptedInvitation,
                                                                    defaults.username)
        } else if hasAccepted == .declined {
            Event.shared.summary = String.localizedStringWithFormat(AlertStrings.declinedInvitation,
                                                                    defaults.username)
        }
        
        Event.shared.currentUser?.hasAccepted = hasAccepted
        CloudManager.shared.saveUserInfoOnCloud(hasAccepted.rawValue,
                                                key: Event.shared.localEventId)
        Event.shared.eventCreation = false
        let currentSession = activeConversation?.selectedMessage?.session ?? MSSession()
        let message = Event.shared.prepareMessage(session: currentSession,
                                                  eventCreation: Event.shared.eventCreation,
                                                  action: .answerInvitation(hasAccepted))
        sendMessageDirectly(message: message)
    }
    
    func eventSummaryVCOpenEventInfo() {
        let controller = instantiateEventInfoViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
    
    func eventSummaryVCOpenExpiredEvent() {
        let controller = instantiateExpiredEventViewController()
        removeViewController(transition: .noTransition)
        addChildViewController(controller: controller, transition: .noTransition)
    }
}

extension MessagesViewController: TasksListViewControllerDelegate {
    func tasksListVCDidTapBackButton() {
        let controller = instantiateEventSummaryViewController()
              removeViewController(transition: .VCGoBack)
              addChildViewController(controller: controller, transition: .VCGoBack)
    }
    
    func tasksListVCDidTapSubmit() {
        let currentSession = activeConversation?.selectedMessage?.session ?? MSSession()
        Event.shared.eventCreation = false
        let message = Event.shared.prepareMessage(session: currentSession,
                                                  eventCreation: Event.shared.eventCreation,
                                                  action: .updateTasks)
        sendMessageDirectly(message: message)
    }
}

extension MessagesViewController: EventInfoViewControllerDelegate {
    func eventInfoVCDidTapBackButton() {
        let controller = instantiateEventSummaryViewController()
        removeViewController(transition: .VCGoBack)
        addChildViewController(controller: controller, transition: .VCGoBack)
    }
    
}

extension MessagesViewController: ExpiredEventViewControllerDelegate {
    func didTapNewEvent(newSubscription: NewSubscription?) {
        self.resetEvent()
        let controller : UIViewController
        if let subscription = newSubscription {
            controller = instantiatePremiumViewController(with: subscription)
        } else {
            controller = instantiateNewEventViewController()
        }
        removeViewController()
        addChildViewController(controller: controller)
    }
}

extension MessagesViewController: PremiumCheckViewControllerDelegate {
    func subscriptionCheckDone(newSubscription: NewSubscription?) {
        let controller : UIViewController
        if let subscription = newSubscription {
            controller = instantiatePremiumViewController(with: subscription)
        } else {
            controller = instantiateNewEventViewController()
        }
        removeViewController()
        addChildViewController(controller: controller, transition: .VCGoUp)
    }
    
    func subscriptionCheckFailed() {
        requestPresentationStyle(.compact)
    }
}

extension MessagesViewController: PremiumViewControllerDelegate {
    func subscribeLater() {
        requestPresentationStyle(.compact)
    }
    
    func subscribedSuccessfully() {
        let controller = instantiateThankYouViewController()
        removeViewController()
        addChildViewController(controller: controller, transition: .VCGoUp)
    }
    
    func restoredSubscription() {
        let controller = instantiatePremiumCheckViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
}

extension MessagesViewController: ThankYouViewControllerDelegate {
    func thankYouVCdidTapContinue() {
        let controller = instantiateNewEventViewController()
        removeViewController(transition: .VCGoForward)
        addChildViewController(controller: controller, transition: .VCGoForward)
    }
}

extension MessagesViewController: EventTranscriptViewDelegate {
    func didTapBubble() {
        self.requestPresentationStyle(.expanded)
    }
}
